#labels Featured,Phase-Requirements,Done
= Utilisation de la structure =

La structure permet au serveur de contrôler un module.

La classe est définie dans le fichier [http://code.google.com/p/zia-epitech-2013-gavory-f/source/browse/trunk/HTTPCommand.h ZIAModule.h]

== Dépendances ==
  * [Transaction]


= Contenu =

== Pointeurs ==

{{{
	ZIA_FCT_PTR(loadModule);
	ZIA_FCT_PTR(onReceiveCommand);
	ZIA_FCT_PTR(onReceiveHead);
	ZIA_FCT_PTR(onReceiveBody);
	ZIA_FCT_PTR(makeResponseBody);
	ZIA_FCT_PTR(makeResponseHead);
	ZIA_FCT_PTR(beforeSendResponse);
	ZIA_FCT_PTR(afterSendResponse);
	ZIA_FCT_PTR(unloadModule);
}}}

Tous ces pointeurs retournent un int et prenent en paramètre, dans cet ordre :
  * Un _int_ précisant le status précédent du module
  * Une référence sur [Transaction]
  * Un pointeur de type _void `*`_ permettant de passer des données spécifiques au serveur.

Le rôle des différents pointeurs est expliqué dans la page [Modules].

== Définitions ==

{{{
#define ZIA_FCT_PTR(N)	int (*N)(int status, ZIAApi::Transaction &, void *)
#define ZIA_FCT(N) int N(int status, ZIAApi::Transaction &transaction, void *param)

#define ZIA_ON_RECEIVE_CMD	0x1
#define ZIA_ON_RECEIVE_HEAD	0x10
#define ZIA_ON_RECEIVE_BODY	0x100
#define ZIA_MAKE_BODY		0x1000
#define ZIA_MAKE_HEAD		0x10000
#define ZIA_BEFORE_SEND		0x100000
#define ZIA_AFTER_SEND		0x1000000
#define ZIA_STATUT_DEFAULT	0x1111111
#define ZIA_WARNING		0x10000000
#define ZIA_ERROR		0x100000000
#define ZIA_FATAL_ERROR		0x1000000000
}}}

Le define ZIA_FCT_PTR décrit le pointeur sur fonction utilisé par l'API.
Le define ZIA_FCT définit le prototype d'une fonction pointé par le précédent pointeur.

Les autres define servent à la gestion de statut. (voir [Integration])

= Exemple d'utilisation =

Des exemples sont accessibles sur la page [Exemple_de_creation_de_module       Exemples de création de module]